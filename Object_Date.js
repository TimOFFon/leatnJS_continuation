
//=====================================================

//                    Object Date

//=====================================================


/**
 *          Date - содержит дату и время, 
 *                 методы управления ими.
 */




/**  _____________  Методы объекта Date  _______________
 *       ---- делятся на следующие категории: ----
 * 
 * 
 *    "set" - служат для установки параметров объекта Date.
 * 
 *    
 *    "get" - служат для получения параметров объекта Date.
 * 
 *    
 *    "to" - служат для получения значения  в текстовом виде.
 * 
 * 
 *    "parse" и UTC - для распознавания дат и времени из
 *                                    текстового формата.
 * 
 * _________________________________________________________
 */





/**_____  Правила использования целочисленных значений_____
 * 
 * 
 *              Секунды и минуты: от 0 до 59
 *              
 *                    Часы: от 0 до 23
 * 
 *       Дни недели: от 0 (Воскресенье) до 6 (Суббота)
 * 
 *                  Дни месяца: от 1 до 31
 * 
 *          Месяцы: от 0 (Январь) до 11 (Декабрь)
 * 
 *             Год: год относительно 1900 года.
 * 
 * 
 * _________________________________________________________
 */






//======================================================

//                  **** СОЗДАНИЕ *****

//======================================================


/**
 *         new Date() - используется конструктор 
 *                      new Date,
 *                      для создания объекта Date
 */


// new Date()
//-----------------------------------------------------,
// создать объект Date с текущей датой и временем
let now = new Date();
// console.log(now);
/**
 * Fri Jan 20 2023 15:17:38 
 * GMT+0300 (Москва, стандартное время)
 */
//-----------------------------------------------------'



// new Date(milliseconds)
//-----------------------------------------------------,
//создать Date с миллисекундами (тысячная доля секунды),
// прошедших с 1 января 1970 года UTC+0
let Jan01_1970 = new Date(0);
// console.log(Jan01_1970);
/**
 * Thu Jan 01 1970 03:00:00 
 * GMT+0300 (Москва, стандартное время)
 */

// добавим 24 часа (24часа * 3600млсек/60мин * 1000млсек)
let Jan02_1970 = new Date(24 * 3600 * 1000);
// console.log(Jan02_1970);
/**
 * Fri Jan 02 1970 03:00:00 GMT+0300 (Москва, стандартное
 * время)
 */
//------------------------------------------------------'



// timestamp
//------------------------------------------------------,
/**
 *           timestamp - количество миллисекунд, 
 *                      прошедших с начала 1970 года
 * 
 *           getTime() - преобразует объект Date
 *                       в timestamp
 */

let timestapExample = new Date().getTime();
// console.log(timestapExample); // 1674220018133
//-----------------------------------------------------'



// до 1 января 1970
//-----------------------------------------------------,
// отрицательный timestamp
let Dec31_1969 = new Date(-24 * 3600 * 1000);
// console.log(Dec31_1969);
/**
 * Wed Dec 31 1969 03:00:00 GMT+0300 (Москва, стандартное
 * sвремя)
 */
//-----------------------------------------------------'



// new Date(datastring)
//----------------------------------------------------,
/**
 *     new Date(datastring) - один аргумент, 
 *                            СТРОКА,
 *                            из неё прочитывается дата
 */
let todayString = new Date('2023-01-20');
// время не указано, ставится полноч по UTC
// console.log(todayString);
/**
 * Thu Jan 20 2023 03:00:00 GMT+0300 (Москва, стандартное
 * время)
 */
//----------------------------------------------------'



//new Date(year, month, date, hours, minutes, seconds, ms)
//------------------------------------------------------,
/** 
 *  Создать Date с заданными компонентами в местном
 *               часовом поясе,
 *               обязательные только первые 2 аргумен.,
 *               year/month
 * 
 *       year  - четыре цифры.
 * 
 *       month - с 0 (январь) по 11 (декабрь).
 * 
 *       date  - день месяца,
 *               если не указан ставится значение 1.
 * 
 *       hours/
 *       minutes/ 
 *       seconds/ - если не указаны ставится значение 0
 *       ms/
*/ 
let datesParam = new Date(2023, 0);
// console.log(datesParam);
/**
 * Sun Jan 01 2023 00:00:00 GMT+0300 (Москва, стандартное
 * время)
 */

let datesParamDay = new Date(2023, 0, 20);
// console.log(datesParamDay);
/**
 * Fri Jan 20 2023 00:00:00 GMT+0300 (Москва, стандартное
 * время)
 */

let datesParamHour = new Date(2023, 0, 20, 16);
// console.log(datesParamHour);
/**
 * Fri Jan 20 2023 16:00:00 GMT+0300 (Москва, стандартное
 * время)
 */
//-----------------------------------------------------'





//======================================================

//         **** ПОЛУЧЕНИЕ КОМПОНЕНТОВ ДАТЫ *****

//======================================================
/**
 * 
 *         getFullYear()   -   получить год (4 цифры)
 *         getUTCFullYear() -  для временной зоны UTC+0    
 * 
 * 
 *         getMonth()    -    получить месяц (0 - 11)
 *         getUTCMonth()  -   UTC+0
 * 
 *         
 *         getDate()   -      получить день (1 - 31)
 *         getUTCDate() -     UTC+0
 * 
 * 
 * 
 *         getDay()  -  получить день недели (0 вск - 6 сбб)
 *                 
 *                      однако соответствующего ему метода
 *                      setDay не существует, потому-что день
 *                      недели высчитывается автоматически
 * 
 *         getUTCDay() -      UTC+0
 * 
 * 
 * 
 *         getHours()  -       получить часы
 *         getUTCHours() -     UTC+0
 * 
 * 
 *         getMinutes() -      получить минуты
 * 
 * 
 *         getSeconds() -      получить секунды
 * 
 * 
 *         getMilliseconds() - получить миллисекунды
 * 
 * 
 *         getTime()  -        timestamp с 
 *                             1 января 1970 UTC+0
 * 
 *         UTC()    -   
 *   (year, month, day, hou, minute, second, millisecond) 
 *                  -      принимает те же самые параметры,
 *                         что и самая длинная форма
 *                         конструктора Date и возвращает
 *                         количество миллисекунд, прошедших
 *                      с 1 января 1970 года 00:00:00 по UTC.
 *  
 * 
 *      getTimezoneOffset()  -  Возвращает разницу в
 *                              минутах между UTC и
 *                              местным часовым поясом
 * 
 * 
 *      valueOf()    -    возвращает примитивное значение
 *                        объекта Date в виде числового типа
 *                        данных — количества миллисекунд,
 *                        прошедших с полуночи 01 января 
 *                                           1970 по UTC  
 * 
 *                       полностью эквивалентен getTime()
 */

// ПРИМЕРЫ----------------------------------------------,
let myDate = new Date();
let myHours = myDate.getHours();
// console.log(myHours); // 19

let utcHours = myDate.getUTCHours();
// console.log(utcHours); // 16

let mySpredTime = myDate.getTimezoneOffset();
// console.log(mySpredTime); // -180



let utcDateMinusOne = new Date(); 
let utcSpredTimeMinusOne = utcDateMinusOne.getTimezoneOffset() + 240; // UTC -1 
// (1h -> 0h -> +1h -> +2h -> +3h)
// четыре шага с локального до целевого
// 60 * 4 = 240
// console.log(utcSpredTimeMinusOne); // 60 (разница +60 до UTC)
//----------------------------------------------------------'




//======================================================

//         **** УСТАНОВКА КОМПОНЕНТОВ ДАТЫ *****

//======================================================
/**
 *            setFullYear(year, [month], [date])
 *            setUTC
 * 
 *            setMonth(month, [date])
 *            setUTC
 * 
 *            setdate(date)
 *            setUTC
 * 
 *            setMinutes(min, [sek], [ms])
 *            setUTC
 * 
 *            setSeconds(sec, [ms])
 *            setUTC
 * 
 *            setMilliseconds(ms)
 *            setUTC
 * 
 *            setTime(milliseconds) дата в миллисекундах
 *                                  с 01.01.1970 UTC
 */


// Если дополнительная компонента не указана она на меняется
//---------------------------------------------------------,
let noChangeComp = new Date();

noChangeComp.setHours(0);
// console.log(noChangeComp); //  00:50:56 GMT+0300
// МИНУТЫ И СЕКУНДЫ остались неизменны
//---------------------------------------------------------'



// Если доп компоненты указаны, то они зафиксируются
//----------------------------------------------------------,
let thereChangeComp = new Date();

thereChangeComp.setHours(23, 23, 23, 333);
// console.log(thereChangeComp); // 23:23:23 GMT+0300
//----------------------------------------------------------'






//======================================================

//        **** ОТОБРАЖЕНИЕ КОМПОНЕНТОВ ДАТЫ *****

//======================================================
/**
 * 
 *         toDateString() - возвращает часть, содержащую
 *                          только дату
 *                          *Wed Jul 28 1993
 * 
 * 
 *         toISOString() - возвращает строку в формате ISO.
 *                         YYYY-MM-DDTHH:mm:ss.sssZ
 *                         Часовой пояс всегда равен UTC
 *                         
 *                         *ISO - порядок записи даты и
 *                                времени 
 * 
 * 
 *          toJSON() -   возвращает представление объекта
 *                       Date в виде JSON.
 *                       (отформатированного с помощью
 *                         toISOString())
 * 
 * 
 *     toLocaleDateString(locales [, options]) -   с датой
 *     toLocaleString(locales [, options]) - и со временем
 *     toLocaleTimeString(locales [, options])
 *                                       возвращает строку
 *                         с языкозависимым представлением
 * 
 *                   locales -               указан язык
 *                
 *                   options -   позволяет настроить вид
 *                                                вывода
 *                   options = { weekday: 'long', 
 *                               year: 'numeric', 
 *                               month: 'long', 
 *                               day: 'numeric'};
 *                       toLocaleDateString('de-DE', options)
 *                         → "Donnerstag, 20. Dezember 2012"
 * 
 * 
 * 
 *          toString()   -  возвращает строковое 
 *                          представление date
 *                          на англ.
 * 
 * 
 * 
 *          toTimeString() - только время
 * 
 * 
 * 
 *          toUTCString() - преобразует дату в строку,
 *                          используя часовой пояс UTC
 * 
 */



// ПРИМЕРЫ МЕТОДОВ TO
//--------------------------------------------------------,

//--------------------------------------------------------'





//======================================================

//            **** АВТОИСПРАВЛЕНИЕ ДАТЫ *****

//======================================================
/**
 * 
 *           Автоисправление - даты вне обычного 
 *                             диапазона значений
 *                             исправляются оъектом.
 *                             
 */
// Распределение лишних дней
//--------------------------------------------------,
let overloadDate = new Date(2023, 0, 35);
// console.log(overloadDate); // Sat Feb 04 2023

let overloadDate2 = new Date(2023, 1, 28);
overloadDate2.setDate(overloadDate2.getDate() + 2);
// console.log(overloadDate2); // Thu Mar 02 2023
//-------------------------------------------------------'



//-------------------------------------------------------,
// Механизм "автоиправления" используется для получения
// дат после заданых отрезков времени
let setTimePeriod = new Date();
let startPeriod = setTimePeriod.getSeconds();

setTimePeriod.setSeconds(setTimePeriod.getSeconds() + 5);

let finishPeriod = setTimePeriod.getSeconds();

// console.log(`СТАРТ: ${startPeriod}, КОНЕЦ ТАЙМЕРА: ${finishPeriod}`);
// СТАРТ: 11, КОНЕЦ ТАЙМЕРА: 16
//---------------------------------------------------------'


//----------------------------------------------------------,
// нулевые и отрицательные значения
let lateDay = new Date(2023, 0, 2); // 2 Jan

lateDay.setDate(1); // задаём позднее число
// console.log(lateDay); // Sun Jan 01 2023

lateDay.setDate(0); // отрицательное значение для Jan
// console.log(lateDay); // Sat Dec 31 2022 (автоисправление)
//----------------------------------------------------------'






//======================================================

//            **** ПРЕОБРАЗОВАНИЕ К ЧИСЛУ *****
//             *****    РАЗНОСТЬ ДАТ     *****

//======================================================


/**
 * Если объект Date преобразовать в число, то получим 
 *                                           таймстап.
 * 
 *           По аналогии с date.getTime()
 */


// численное преобразование
//------------------------------------------------------,
let toNumberDate = new Date();
// console.log(+toNumberDate); // 1674485481677
//------------------------------------------------------'



// вычитание (разность в миллисекундах)
//------------------------------------------------------,

// начинаем отчёт
let startT1 = new Date(); 

// выпоняем некоторые действия
for (let i = 0; i < 100000; i++) {
    let doSomething = i * i * i;
}

// заканчиваем отчёт
let stopT1 = new Date;

//выводим результат
// console.log(`Цикл отработал за ${stopT1 - startT1} миллисекунд`);

// Цикл отработал за 7 миллисекунд
//------------------------------------------------------'






//======================================================

//              **** МЕТОД Date.now() *****

//======================================================

/**
 *         Date.now()  -  возвращает текущую метку 
 *                        времени (в миллисекундах)
 * 
 * 
 *         Эквивалентен   -  new Date().getTime()
 * 
 * 
 * 
 *            БЫСТРЕЕ  -  new Date().getTime()
 * 
 *                        поскольку он не создает 
 *                        промежуточный объект
 *                        Date
 * 
 *                        не нагружая сборщик 
 *                        мусора
 * 
 *  т.к. он быстродейственен его ипспользуют при разработке
 *  игр или специализиованных приложений
 */



// визуализация быстродействия
//------------------------------------------------------,
// количество миллисекунд
let startDNow = Date.now();

// выполняем некоторые действия
for (let i = 0; i < 100000; i++) {
    let doSomething = i * i * i;  
}

// заканчиваем отчёт
let stopDNow = Date.now();

// выводим результат
// console.log(`Цикл отработал за ${stopDNow - startDNow} миллисекунд`);

// Цикл отработал за 6 миллисекунд
//------------------------------------------------------'






//======================================================

//                 **** БЕНЧМАРКИНГ *****

//======================================================

/**
 *       Бенчмаркет - вичисления замеряющие  
 *                     производительность.
 */



// Какая функция быстрее?
//---------------------------------------------------------,
// функциb возвраща.т разницу между двумя объектами Date

// преобразование даты в число
function diffSubstract(date1, date2) {
    return date2 - date1;
}

// использует явный метод date.getTime()
function diffGetTime(date1, date2) {
    return date2.getTime() - date1.getTime();
}

//---------------------------------------------------------'



// ПРОВОДИМ ИЗМЕРЕНИЯ
//---------------------------------------------------------,
// запускаем их несколько раз и проверяем разницу

function bench(f) {
    let date1 = new Date(0);
    let date2 = new Date();

    let start = Date.now();

    for (let i = 0; i < 100000; i++) {
        f(date1, date2);
    }

    return Date.now() - start;
}

// console.log('Время diffSubtract: ' + bench(diffSubstract) + 'мс');

// console.log('Время diffGetTime: ' + bench(diffGetTime) + 'мс');

// Время diffSubtract: 50мс
// Время diffGetTime: 9мс
//---------------------------------------------------------'



/**
 *    Метод getTime() работает ощутимо быстрее!
 *       
 *    Потому, что не производится преобразование типов, и
 *    интерпретаторам такое намного легче оптимизировать.
 */



/**
 *    При выполнении первой функции, которая производит
 *    преобразование, процессор мог параллельно делать
 *    что-то ещё, потребляя ресурсы.
 * 
 *    А к началу выполнения bench(diffGetTime) он это уже
 *    завершил.
 * 
 *    Достаточно реалистичный сценарий в современных
 *    многопроцессорных операционных системах.
 * 
 *    В итоге у первого бенчмарка окажется меньше ресурсов
 *    процессора, чем у второго. 
 *    Это может исказить результаты.
 */



/**------------------------------------------------------
 *    ДЛЯ ПОЛУЧЕНИЯ НАИБОЛЕЕ ДОСТОВЕРНЫХ РЕЗУЛЬТАТОВ 
 *    ТЕСТОВ ПРОИЗВОДИТЕЛЬНОСТИ ВЕСЬ НАБОР 
 *    БЕНЧМАРКОВ НУЖНО ЗАПУСКАТЬ ПО НЕСКОЛЬКО РАЗ
 * -----------------------------------------------------
 */



// ЗАПУСКАЕМ ТЕСТ НЕСКОЛЬКО РАЗ
//--------------------------------------------------------,
let result_1 = 0;
let result_2 = 0;

//запускаем бенчмарки по 10 раз
for (let i = 0; i < 10; i++) {
    result_1 += bench(diffSubstract);
    result_2 += bench(diffGetTime);
}

// выводим результат 
// console.log('Итоговое время diffSubtract: ' + result_1);
// console.log('Итоговое время diffGetTime: ' + result_2);

// Итоговое время diffSubtract: 317
// Итоговое время diffGetTime: 27
//--------------------------------------------------------' 



/**
 *   Современные интерпретаторы JS начинают применять
 *   продвинутые оптимизации только к "горячему коду",
 *   выполняющемуся несколько раз.
 *   (незачем оптимизировать то, что редко выполняется)
 * 
 *   Для должной оптимизации нелишним будет добавить
 *   предварительный запуск для  «разогрева»:
 */



// РАЗОГРЕВ
//---------------------------------------------------------,
// добовляем для разогрева перед основным циклом
bench(diffSubstract);
bench(diffGetTime);

let result_1_r = 0;
let result_2_r = 0;

// теперь тестируем
for (let i = 0; i < 10; i++) {
    result_1_r += bench(diffSubstract);
    result_2_r += bench(diffGetTime);
}

// выводим результат 
// console.log('Итоговое время diffSubtract: ' + result_1_r);
// console.log('Итоговое время diffGetTime: ' + result_2_r);

// Итоговое время diffSubtract: 310 //  было 317
// Итоговое время diffGetTime: 23 //  было 27

//--------------------------------------------------------'