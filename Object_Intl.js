
//=====================================================

//                    Object Intl

//         интернационализация в JavaScript

//=====================================================

/*
           Строки, даты, числа -   в JS «не в курсе» языка 
                                   и особенностей стран, 
                                   где находится посетитель

           Строки:     При сравнении сравниваются коды сим-
                       волов, а это неправильно. 
                       В русском языке оказывается "ё">"я"
                       и "а">"Я", хотя я - последняя в ал-
                       фавите, она должна быть больше лю-
                       бой другой.

           Даты:       В разных странах разная запись дат.
                       В РФ пишут 31.12.2014, в США 
                       12/31/2014, где-то иначе.

           Числа:      В странах где-то пишут цифрами, где-
                       то иероглифами, длинные числа разде-
                       ляются где-то пробелом, где-то 
                       запятой.
 */

//==========================================================
//==========================================================
//==========================================================
//==========================================================

//                    ОСНОВНЫЕ ОБЪЕКТЫ

//==========================================================
//==========================================================
//==========================================================
//==========================================================
/*
     Intl.Collator           - сортирует и сравнивает строки


     Intl.DateTimeFormat     - форматирует дату и время в
                               соответсвии с языком
                               
     Intl.NumberFormat       - форматирует числа в соответ-
                               ствии с языком
*/


//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                        ЛОКАЛЬ

//========================================================
//========================================================
//========================================================
//========================================================
/*
        Локаль      – первый и самый важный аргумент всех 
                      методов, связанных с интернациона-
                      лизацией


    Локаль описывается строкой из трёх компонентов, 
    которые разделяются дефисом:

               1) Код языка.
               2) Код способа записи.
               3) Код страны.


    На практике не всегда указаны три, обычно меньше:

    1) ru – русский язык, без уточнений.
    2) en-GB – английский язык, используемый в Англии (GB).
    3) en-US – английский язык, используемый в США (US).
    4) zh-Hans-CN – китайский язык (zh), записываемый упро-
       щённой иероглифической письменностью (Hans), 
       используемый в Китае.

    Через суффикс -u-* можно указать расширения локалей, 
    например "th-TH-u-nu-thai" – тайский язык (th), исполь-
    зуемый в Таиланде (TH), 
    с записью чисел тайскими буквами 
    (๐, ๑, ๒, ๓, ๔, ๕, ๖, ๗, ๘, ๙).

    Все методы принимают локаль в виде строки или массива, 
    содержащего несколько локалей в порядке предпочтения.

    Если локаль не указана или undefined – берётся локаль 
    по умолчанию, установленная в окружении (браузере).
*/


//=========================================================
//              Подбор локали localeMatcher
//=========================================================
/*
      localeMatcher   –   вспомогательная настройка, которую 
                          тоже можно везде указать, она опре-
                          деляет способ подбора локали, если 
                          желаемая недоступна.


    У него два значения:  
    
         "lookup"  – означает простейший порядок поиска путём 
                     обрезания суффикса, например zh-Hans-CN → 
                     zh-Hans → zh → локаль по умолчанию.

        "best fit" – использует встроенные алгоритмы и предпо-
                     чтения браузера (или другого окружения) 
                     для выбора подходящей локали.


                     По умолчанию стоит "best fit"

    Если локалей несколько, например ["zh-Hans-CN", "ru-RU"] 
    то localeMatcher пытается подобрать наиболее подходящую 
    локаль для первой из списка (китайская), если не полу-
    чается – переходит ко второй (русской) и так далее. 
    Если ни одной не нашёл, например на компьютере не совсем 
    поддерживается ни китайский ни русский, то используется 
    локаль по умолчанию.
*/



//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                Строки, Intl.Collator

//========================================================
//========================================================
//========================================================
//========================================================
/* ПАРАМЕТРЫ:

                 locales       - локаль, одна или массив в
                                 порядке предпочтения



                 options       - объект с доп.настройками:


    Алгоритм выбора подходящей локали -      localeMatcher

                       Цель сравнения -      usage
                           сортировка -      "sort"
                                поиск -      "search"

     Чувствительность, какие различия -      sensitivity
     в символах учитывать, а какие - 
                       нет, варианты:

     учитывать только разные символы, -   base
    без диакрических знаков и регистра, 
    например: а ≠ б, е = ё, а = А

    учитывать символы и диакритические -  accent
    знаки, например: а ≠ б, е ≠ ё, а = А

          учитывать символы и регистр, -  case
          например:а ≠ б, е = ё, а ≠ А

                учитывать всё, символ, -  variant
        диакритические знаки, регистр, 
         например:а ≠ б, е ≠ ё, а ≠ А, 
             используется по умолчанию

        Игнорировать знаки пунктуации, -      ignorePunctuation
                             например:        true/false
                    по умолчанию false

  Использовать ли численное сравнение, -      numeric
  например: если true, то будет 12 > 2,       true/false
                          иначе 12 < 2

      В сортировке должны идти первыми -      caseFirst
          прописные или строчные буквы, 
                              варианты:
                              прописные - "upper"
                               строчные - "lower"
          стандартное для локали, также - "false"
        является значением по умолчанию

В подавляющем большинстве случаев подходят стандартные 
параметры, то есть options указывать не нужно.
*/


// ПРИМЕРЫ
//--------------------------------------------------------
/* 
    let result = collator.compare(str1, str2);

    Результат compare имеет значение: 
                                      больше - 1
                                      равно  - 0
                                      меньше - -1
*/
// --------- стандартные настройки --------
let collator = new Intl.Collator();

// console.log('ёжик' > 'яблоко'); // true 
//(ёжик больше, что неверно)

// console.log(collator.compare('ёжик' > 'яблоко'));// -1
// (ёжик меньше, верно)


//------ настраиваем чувствительность ------
let collator1 = new Intl.Collator();

// сортировка
// console.log(collator1.compare("ЁжиК", "ёжик")); // 1
// ("ЁжиК" больше, верно)


let collator2 = new Intl.Collator(undefined, {
    sensitivity: 'accent'
});

//сортировка
// console.log(collator2.compare("ЁжиК", "ёжик")); // 0
// (равны, из-за игнорирования регистра)



//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                Даты, Intl.DateTimeFormat

//========================================================
//========================================================
//========================================================
//========================================================

// Создание
// let formatter = new Intl.DateTimeFormat([locales, [options]]);

/*
    locales   -  аргумент, как и в Collator

    options   - можем определить какие именно части даты
                показывать (часы, месяц, год...) в каком
                формате

-----------------------------------------------------------
    Полный список свойств options:
-----------------------------------------------------------
    Свойство       Описание     Значения     по умолчанию
----------------------------------------------------------
    localeMather   Алгоритм     lookup,      best
                   подбора      best,
                   локали       fit
----------------------------------------------------------   
    formatMatcher  Алгоритм     basic,       best
                   подбора      best,
                   формата      fit
----------------------------------------------------------
    hour12         Включать     true --
                   ли время     12 - 
                   в 12-ча-     формат
                   совом        false -
                   формате      -- 24
----------------------------------------------------------
    timeZone       Временная    Europe/      UTC
                   зона         Moscow
----------------------------------------------------------
    weekday        День         narrow,
                   недели       short,
                                long
---------------------------------------------------------
    era            Эра          narrow,
                                short,
                                long
---------------------------------------------------------
    year           Год          2-digit,     undefined
                                numeric      или numeric
---------------------------------------------------------
    month          Месяц        2-digit,     undefined
                                numeric,     или numeric
                                narrow,
                                short,
                                long
---------------------------------------------------------
    day            День         2-digit,     undefined
                                numeric      или numeric
---------------------------------------------------------
    hour           Час          2-digit,
                                numeric
---------------------------------------------------------
    minute         Минуты       2-digit,
                                numeric
---------------------------------------------------------
    second         Секунды      2-digit,
                                numeric
---------------------------------------------------------
    timeZoneName   Название     short,
                   таймзоны     long
---------------------------------------------------------
*/

/*=======================================================
=========================================================
    Все локали обязаны поддерживать следующие наборы
    Настроек:
=========================================================
========================================================
    weekday,  year, month, day, hour, minute, second
    weekday,  year, month, day
    year, month, day
    year, month
    month, day
    hour, minute, second
=========================================================
=========================================================

Использование:
let dateString = formatter.format(date);
*/

//Пример
//-------------------------------------------------------

let date = new Date(2023, 01, 02, 18, 36, 0);

let formatter1 = new Intl.DateTimeFormat('ru');
// console.log(formatter1.format(date)); // 02.02.2023

let formatter2 = new Intl.DateTimeFormat('en-US');
// console.log(formatter2.format(date)); // 2/2/2023

//Длинная дата с настройками
//-------------------------------------------------------

let date2 = new Date(2023, 01, 02, 18, 36, 0);

let formatter3 =  new Intl.DateTimeFormat('ru', {
    weekday: 'long',// (narrow(Ч), short(Чт), long(четверг))
    year: 'numeric',// (2-digit(23г), numeric(2023 г.))
    month: 'long',// (2-digit, numeric, narrow, short, long)
                //    02       02        Ф    февр.  февраля
    day: 'numeric' // (2-digit(02),numeric(2))
});

// console.log(formatter3.format(date2));
// четверг, 2 февраля 2023 г.

// Только время
//----------------------------------------------------

let date3 = new Date(2023, 01, 02, 18, 36, 0);

let formatter4 = new Intl.DateTimeFormat("ru", {
    hour: "2-digit", // 2-digit, numeric
    minute: "2-digit", // 2-digit, numeric
    second: "2-digit" // 2-digit, numeric
  });

//   console.log(formatter4.format(date3)); // 18:36:00
//--------------------------------------------------------



//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                Числа, Intl.NumberFormat

//========================================================
//========================================================
//========================================================
//========================================================
