
//=====================================================

//                    Object Intl

//         интернационализация в JavaScript

//=====================================================

/*
           Строки, даты, числа -   в JS «не в курсе» языка 
                                   и особенностей стран, 
                                   где находится посетитель

           Строки:     При сравнении сравниваются коды сим-
                       волов, а это неправильно. 
                       В русском языке оказывается "ё">"я"
                       и "а">"Я", хотя я - последняя в ал-
                       фавите, она должна быть больше лю-
                       бой другой.

           Даты:       В разных странах разная запись дат.
                       В РФ пишут 31.12.2014, в США 
                       12/31/2014, где-то иначе.

           Числа:      В странах где-то пишут цифрами, где-
                       то иероглифами, длинные числа разде-
                       ляются где-то пробелом, где-то 
                       запятой.
 */

//==========================================================
//==========================================================
//==========================================================
//==========================================================

//                    ОСНОВНЫЕ ОБЪЕКТЫ

//==========================================================
//==========================================================
//==========================================================
//==========================================================
/*
     Intl.Collator           - сортирует и сравнивает строки


     Intl.DateTimeFormat     - форматирует дату и время в
                               соответсвии с языком
                               
     Intl.NumberFormat       - форматирует числа в соответ-
                               ствии с языком
*/


//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                        ЛОКАЛЬ

//========================================================
//========================================================
//========================================================
//========================================================
/*
        Локаль      – первый и самый важный аргумент всех 
                      методов, связанных с интернациона-
                      лизацией


    Локаль описывается строкой из трёх компонентов, 
    которые разделяются дефисом:

               1) Код языка.
               2) Код способа записи.
               3) Код страны.


    На практике не всегда указаны три, обычно меньше:

    1) ru – русский язык, без уточнений.
    2) en-GB – английский язык, используемый в Англии (GB).
    3) en-US – английский язык, используемый в США (US).
    4) zh-Hans-CN – китайский язык (zh), записываемый упро-
       щённой иероглифической письменностью (Hans), 
       используемый в Китае.

    Через суффикс -u-* можно указать расширения локалей, 
    например "th-TH-u-nu-thai" – тайский язык (th), исполь-
    зуемый в Таиланде (TH), 
    с записью чисел тайскими буквами 
    (๐, ๑, ๒, ๓, ๔, ๕, ๖, ๗, ๘, ๙).

    Все методы принимают локаль в виде строки или массива, 
    содержащего несколько локалей в порядке предпочтения.

    Если локаль не указана или undefined – берётся локаль 
    по умолчанию, установленная в окружении (браузере).
*/


//=========================================================
//              Подбор локали localeMatcher
//=========================================================
/*
      localeMatcher   –   вспомогательная настройка, которую 
                          тоже можно везде указать, она опре-
                          деляет способ подбора локали, если 
                          желаемая недоступна.


    У него два значения:  
    
         "lookup"  – означает простейший порядок поиска путём 
                     обрезания суффикса, например zh-Hans-CN → 
                     zh-Hans → zh → локаль по умолчанию.

        "best fit" – использует встроенные алгоритмы и предпо-
                     чтения браузера (или другого окружения) 
                     для выбора подходящей локали.


                     По умолчанию стоит "best fit"

    Если локалей несколько, например ["zh-Hans-CN", "ru-RU"] 
    то localeMatcher пытается подобрать наиболее подходящую 
    локаль для первой из списка (китайская), если не полу-
    чается – переходит ко второй (русской) и так далее. 
    Если ни одной не нашёл, например на компьютере не совсем 
    поддерживается ни китайский ни русский, то используется 
    локаль по умолчанию.
*/



//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                Строки, Intl.Collator

//========================================================
//========================================================
//========================================================
//========================================================
/* ПАРАМЕТРЫ:

                 locales       - локаль, одна или массив в
                                 порядке предпочтения



                 options       - объект с доп.настройками:


    Алгоритм выбора подходящей локали -      localeMatcher

                       Цель сравнения -      usage
                           сортировка -      "sort"
                                поиск -      "search"

     Чувствительность, какие различия -      sensitivity
     в символах учитывать, а какие - 
                       нет, варианты:

     учитывать только разные символы, -   base
    без диакрических знаков и регистра, 
    например: а ≠ б, е = ё, а = А

    учитывать символы и диакритические -  accent
    знаки, например: а ≠ б, е ≠ ё, а = А

          учитывать символы и регистр, -  case
          например:а ≠ б, е = ё, а ≠ А

                учитывать всё, символ, -  variant
        диакритические знаки, регистр, 
         например:а ≠ б, е ≠ ё, а ≠ А, 
             используется по умолчанию

        Игнорировать знаки пунктуации, -      ignorePunctuation
                             например:        true/false
                    по умолчанию false

  Использовать ли численное сравнение, -      numeric
  например: если true, то будет 12 > 2,       true/false
                          иначе 12 < 2

      В сортировке должны идти первыми -      caseFirst
          прописные или строчные буквы, 
                              варианты:
                              прописные - "upper"
                               строчные - "lower"
          стандартное для локали, также - "false"
        является значением по умолчанию

В подавляющем большинстве случаев подходят стандартные 
параметры, то есть options указывать не нужно.
*/


// ПРИМЕРЫ
//--------------------------------------------------------
/* 
    let result = collator.compare(str1, str2);

    Результат compare имеет значение: 
                                      больше - 1
                                      равно  - 0
                                      меньше - -1
*/
// --------- стандартные настройки --------
let collator = new Intl.Collator();

// console.log('ёжик' > 'яблоко'); // true 
//(ёжик больше, что неверно)

// console.log(collator.compare('ёжик' > 'яблоко'));// -1
// (ёжик меньше, верно)


//------ настраиваем чувствительность ------
/*
sensitivity: 
base: а ≠ б, е = ё, а = А
accent: а ≠ б, е ≠ ё, а = А
case: а ≠ б, е = ё, а ≠ А
variant: а ≠ б, е ≠ ё, а ≠ А, используется по умолчанию.
*/
let collator1 = new Intl.Collator();

// сортировка
//-----------------------------------------------------
// console.log(collator1.compare("ЁжиК", "ёжик")); // 1
// ("ЁжиК" больше, верно)


let collator2 = new Intl.Collator(undefined, {
    sensitivity: 'accent'
});

//сортировка
//-----------------------------------------------------
// console.log(collator2.compare("ЁжиК", "ёжик")); // 0
// (равны, из-за игнорирования регистра)

let collator3_a = new Intl.Collator();
let collator3_b = new Intl.Collator('ru', {
    sensitivity: 'case'
});

// console.log(collator3_a.compare('ежик', 'ёжик'));// -1
// console.log(collator3_b.compare('ежик', 'ёжик'));// 0


//поиск (usage: 'search')
//------------------------------------------
{
    let arr = ['a', 'ad', 'af', 'f'];
    let strToSearch = 'af';

    let collator = new Intl.Collator('en', {
        usage: 'search'
    });
    
    let matches = arr.filter(str => collator
                  .compare(str, strToSearch)===0);

    // console.log(matches); // ['af']
}

//настройка чувствительности (usage: 'search')
//--------------------------------------------
{
    let arr = ["ё", "е", "ёф", "еф", "Ёф", "ёк", "Е"];
    let strToSearch = "еф";

    let collator = new Intl.Collator('ru', {
        sensitivity: 'variant',
        usage: 'search'
    })

    let matches = arr.filter(str => collator
        .compare(str, strToSearch)===0);

    // console.log(matches);// 'base' => ['ёф', 'еф', 'Ёф']
    // console.log(matches);// 'accent' => ['еф']
    // console.log(matches);// 'case' => ['ёф', 'еф']
    // console.log(matches);// 'variant' => ['еф']
}

// сортировка строчных цифр
//-------------------------------------------------
{
    let collator = new Intl.Collator('en', {
        numeric: true
    });
    let nums = ['10', '2', '100', 1, 0, 1000];

    let result = nums.sort(collator.compare);

    // console.log(result); // [0, 1, '2', '10', '100', 1000]
}


//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                Даты, Intl.DateTimeFormat

//========================================================
//========================================================
//========================================================
//========================================================

// Создание
// let formatter = new Intl.DateTimeFormat([locales, [options]]);

/*
    locales   -  аргумент, как и в Collator

    options   - можем определить какие именно части даты
                показывать (часы, месяц, год...) в каком
                формате

-----------------------------------------------------------
    Полный список свойств options:
-----------------------------------------------------------
    Свойство       Описание     Значения     по умолчанию
----------------------------------------------------------
    localeMather   Алгоритм     lookup,      best
                   подбора      best,
                   локали       fit
----------------------------------------------------------   
    formatMatcher  Алгоритм     basic,       best
                   подбора      best,
                   формата      fit
----------------------------------------------------------
    hour12         Включать     true --
                   ли время     12 - 
                   в 12-ча-     формат
                   совом        false -
                   формате      -- 24
----------------------------------------------------------
    timeZone       Временная    Europe/      UTC
                   зона         Moscow
----------------------------------------------------------
    weekday        День         narrow,
                   недели       short,
                                long
---------------------------------------------------------
    era            Эра          narrow,
                                short,
                                long
---------------------------------------------------------
    year           Год          2-digit,     undefined
                                numeric      или numeric
---------------------------------------------------------
    month          Месяц        2-digit,     undefined
                                numeric,     или numeric
                                narrow,
                                short,
                                long
---------------------------------------------------------
    day            День         2-digit,     undefined
                                numeric      или numeric
---------------------------------------------------------
    hour           Час          2-digit,
                                numeric
---------------------------------------------------------
    minute         Минуты       2-digit,
                                numeric
---------------------------------------------------------
    second         Секунды      2-digit,
                                numeric
---------------------------------------------------------
    timeZoneName   Название     short,
                   таймзоны     long
---------------------------------------------------------
*/

/*=======================================================
=========================================================
    Все локали обязаны поддерживать следующие наборы
    Настроек:
=========================================================
========================================================
    weekday,  year, month, day, hour, minute, second
    weekday,  year, month, day
    year, month, day
    year, month
    month, day
    hour, minute, second
=========================================================
=========================================================

Использование:
let dateString = formatter.format(date);
*/

//Пример
//-------------------------------------------------------

let date = new Date(2023, 01, 02, 18, 36, 0);

let formatter1 = new Intl.DateTimeFormat('ru');
// console.log(formatter1.format(date)); // 02.02.2023

let formatter2 = new Intl.DateTimeFormat('en-US');
// console.log(formatter2.format(date)); // 2/2/2023

//Длинная дата с настройками
//-------------------------------------------------------

let date2 = new Date(2023, 01, 02, 18, 36, 0);

let formatter3 =  new Intl.DateTimeFormat('ru', {
    weekday: 'long',// (narrow(Ч), short(Чт), long(четверг))
    year: 'numeric',// (2-digit(23г), numeric(2023 г.))
    month: 'long',// (2-digit, numeric, narrow, short, long)
                //    02       02        Ф    февр.  февраля
    day: 'numeric' // (2-digit(02),numeric(2))
});

// console.log(formatter3.format(date2));
// четверг, 2 февраля 2023 г.

// Только время
//----------------------------------------------------

let date3 = new Date(2023, 01, 02, 18, 36, 0);

let formatter4 = new Intl.DateTimeFormat("ru", {
    hour: "2-digit", // 2-digit, numeric
    minute: "2-digit", // 2-digit, numeric
    second: "2-digit" // 2-digit, numeric
  });

  let formatter5 = new Intl.DateTimeFormat("ru", {
    hour: "numeric", 
    minute: "numeric", 
    second: "numeric",
    hour12: true 
  });

//   console.log(formatter4.format(date3)); // 18:36:00
//   console.log(formatter5.format(date3)); // 6:36:00 PM

// Получение локали браузера (navigator)
//--------------------------------------------------------
let language = navigator.language;
// console.log(language);//(код локали браузера пользователя)





//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                Даты, Intl.RelativeTimeFormat 

//========================================================
//========================================================
//========================================================
//========================================================
/*
        Intl.RelativeTimeFormat - объект форматирующий
                                  относительное время
                                   с учетом языка.
*/
{  //------------------ En -----------------------
    let rtf1 = new Intl.RelativeTimeFormat('en', {
        style: 'long'// short/long/narrow
    });
    // quarter
    //-----------------------------------------
    // narrow => in 3 qtrs.
    // console.log(rtf1.format(3, 'quarter'));

    // short => in 3 qtrs.
    // console.log(rtf1.format(3, 'quarter'));

    // long => in 3 quarters
    // console.log(rtf1.format(3, 'quarter'));
    
    //day
    //-----------------------------------------
    // long => 1 day ago
    // console.log(rtf1.format(-1, 'day'));
}

{//---------------------- Ru ----------------------
    let rtf2 = new Intl.RelativeTimeFormat('ru', {
        numeric: 'always' // 'always'/'auto'
    });

    // auto => послезавтра
    // always => через два дня
    // console.log(rtf2.format(2, 'day'));

}


//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                Числа, Intl.NumberFormat

//========================================================
//========================================================
//========================================================
//========================================================
/*
        Intl.NumberFormat  - форматирует числа, валюту,
                             проценты
 */
//Синтаксис
//------------------------------------------------------
// let formatter = new Intl.NumberFormat([locales[, options]]);
//-----------------------------------------------------



//=========================================================
//                         ОПЦИИ
//=========================================================

/*---------------------------------------------------------
Свойство                 Описание                 Значения
-----------------------------------------------------------
localeMatcher       Алгоритм подбора       lookup, best fit
                    локали
-----------------------------------------------------------
style               Стиль форматиро-       decimal, percent
                    вания                  currency
-----------------------------------------------------------
currency            Алфавитный код         например USD
                    валюты
-----------------------------------------------------------
currencyDisplay     Валюта в виде          code, symbol,
                    символа                name
-----------------------------------------------------------
useGrouping         Разделять цифры        true, false
                    на группы
-----------------------------------------------------------
mimnimumIntegerDigits     Мин. кол
                          цифр це-         от 0 до 21
                          лой части
----------------------------------------------------------
minimumFractionDigits     Макс. кол
                          десятичных       от 0 до 20
                          цифр
----------------------------------------------------------
maximumFractionDigits     Макс. кол      minFractionDigits 
                          десятичных             до
                          цифр                   20
----------------------------------------------------------
minimumSignificantDigits    Мин кол
                            значимых      от 0 до 21
                            цифр
----------------------------------------------------------
maximumSignificantDigits    Макс кол           от
                            значимых       minSignDig 
                            цифр             до 21
---------------------------------------------------------
*/



// ПРИМЕРЫ
//=======================================================

//Без опций
//---------------------------------------------
{
    let formatter = new Intl.NumberFormat('ru');

    // console.log(formatter.format(1234567890.123));
    // 1 234 567 890,123
}

//С ограничением значимых цифр (важны только первые 3)
//----------------------------------------------------
{
    let formatter = new Intl.NumberFormat('ru', {
        maximumSignificantDigits: 3
    });

    // console.log(formatter.format(1234567890.123));
    //1 230 000 000
}

// С опциями для валюты
//-------------------------------------------------
{
    let formatter = new Intl.NumberFormat('ru', {
        style: 'currency',
        currency: 'GBP'
    });

    // console.log(formatter.format(1234.5));
    // 1 234,50 £
}

// С двумя цифрам после запятой
//------------------------------------------------
{
    let formatter = new Intl.NumberFormat('ru', {
        style: 'currency',
        currency: 'GBP',
        minimumFractionDigits: 2
    });

    // console.log(formatter.format(1234.5));
    // 1 234,50 £
}
//--------------------------------------------------------







//=========================================================
//=========================================================
//=========================================================
//=========================================================

//                Методы в Date, String, Number

//========================================================
//========================================================
//========================================================
//========================================================

/*
         Методы форматирования также поддерживаются 
      
                в  строках, датах, числах:
*/

/*
      Все эти методы при запуске создают соответствующий 
      объект Intl.* 
      и передают ему опции, можно рассматривать их как 
      укороченные варианты вызова.
*/

/*======================================================
String.prototype.localeCompare(that[,locales[,options]])
========================================================

Сравнивает строку с другой, с учётом локали, например:
*/
{
    let str = 'ёжик';

    // console.log(str.localeCompare('яблоко', 'ru'));
    // -1
}

/*======================================================
Date.prototype.toLocaleString([locales [, options]])
========================================================

Форматирует дату в соответствии с локалью, например:
*/
{
    let date = new Date(2023, 01, 03, 18, 32);

    // console.log(date.toLocaleString('ru', {
    //     year: 'numeric',
    //     month: 'long'
    // }));
    // февраль 2023 г.
}

/*======================================================
Date.prototype.toLocaleDateString([locales [, options]])
========================================================

То же, что и выше, но опции по умолчанию включают в себя 
год, месяц, день
*/

/*======================================================
Date.prototype.toLocaleTimeString([locales [, options]])
========================================================

То же, что и выше, но опции по умолчанию включают в себя 
часы, минуты, секунды
*/

/*======================================================
Number.prototype.toLocaleString([locales [, options]])
========================================================

Форматирует число, используя опции Intl.NumberFormat.
*/


