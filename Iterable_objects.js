

///              –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã

/**
 * –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã - –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
 *                       –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç –≤ —Ü–∏–∫–ª–µ for..of.
 *                       –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏.
 */
/* –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ */

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥  -  Symbol.iterator

/**
 * –ö–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ü–∏–∫–ª for..of, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
 * –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, —Ü–∏–∫–ª –≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É.
 */

/**
 * Symbol.iterator - –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ü–∏–∫–ª–∞ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 
 * –ò–¢–ï–†–ê–¢–û–† (–æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º next())
 */

/**
 * –î–∞–ª—å—à–µ for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –º–µ—Ç–æ–¥–æ–º next()
 */

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ next() –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥
 *         {done: Boolean, value: any}
 * –≥–¥–µ done=true –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω,
 * –∏–Ω–∞—á–µ value —Å–æ–¥–µ—Ä–∂–∏—Ç–æ—á–µ—Ä–µ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 */

let range = {
    from: 1,
    to: 10
};
// 1. –≤—ã–∑–æ–≤ for..of —Å–Ω–∞—á–∞–ª–æ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
range[Symbol.iterator] = function() {

    // ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
    // 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º,
    //    –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
    return {
        current: this.from,
        last: this.to,
    

    // 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞
    //    —Ü–∏–∫–ª–∞ for..of
    next() {
        // 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞
        // {done:.., value:..} 
        if(this.current <= this.last) {
            return {done: false, value: this.current++};
        } else {
            return {done: true};
        }
    }
    };
};


// n—Ç–µ–ø–µ—Ä—å –û–ë–´–ß–ù–´–ô –æ–±—ä–µ–∫—Ç —Å—Ç–∞–ª –ò–¢–ï–†–ò–†–£–ï–ú–´–ú
// for(let num of range) {
//     console.log(num);
// }

//====================================================
//====================================================
//====================================================

/**
 * —É –û–ë–´–ß–ù–´–• –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ next(), –æ–Ω —Å–æ–∑–¥–∞—ë—Ç—Å—è
 * –≤—ã–∑–æ–≤–æ–º –ò–¢–ï–†–ê–¢–û–†–ê [Symbol.iterator](), –∏ –∏–º–µ–Ω–Ω–æ –µ–≥–æ
 * next() –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.
 */

/**
 * —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –æ—Ç–¥–µ–ª—ë–Ω –æ—Ç —Å–∞–º–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ
 * –æ–±—ä–µ–∫—Ç–∞
 */


/**
 * —Ç–µ—Ö–∏—á–µ—Å–∫–∏–π, –º—ã –º–æ–∂–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
 * —Å–∞–º range –∫–∞–∫ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∫–æ–¥.
 */

let range2 = {
    from: 1,
    to: 10,

    [Symbol.iterator]() {
        this.current = this.from;
        return this;
    },

    next() {
        if(this.current <= this.to) {
            return {done: false, value: this.current++};
        } else {
            return {done: true};
        }
    }
};

// for(let num of range2) {
//     console.log(num);
// }

/**
 * —Ç–µ–ø–µ—Ä—å range2[Symbol.iterator]() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 * —Å–∞–º –æ–±—ä–µ–∫—Ç range2, –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–µ—Ç–æ–¥ 
 * next(), –∏ –æ–Ω –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
 * –≤ this.current
 */


/**
 * –ø—Ä–∏ range2.to = Infinity range2 –±—É–¥–µ—Ç –±–µ—Å—Å–∫–æ–Ω–µ—á–Ω—ã–º 
 * —Ü–∏–∫–ª–æ–º
 * –∏–ª–∏
 * –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é 
 * –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.
 * –¶–∏–∫–ª for..of –≤ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å 
 * –∏—Å–ø–æ–ª—å–∑—É—è break
 */



//===================================================
//             –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ –∏—Ç–µ—Ä—Ç–æ—Ä–∞

/**
 * –ë—É–¥–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ for..of, –Ω–æ –≤—Ä—É—á–Ω—É—é,
 * –ø—Ä—è–º—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏.
 * 
 * –†–∞–∑–±–∏–≤–∞—è –ø—Ä–æ—Ü–µ—Å—Å –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
 * –∫–æ–Ω—Ç—Ä–æ–ª—è.
 * 
 * –ú—ã –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏—Ç–µ–∞—Ä–∞—Ç–æ—Ä –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–∞
 * –∏ –±–µ—Ä—ë–º –∏–∑ –Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω—è next()
 */

let stroka = 'Hello';

let iterator = stroka[Symbol.iterator]();

while(true) {
    let result = iterator.next();
    if(result.done) break;
    // alert(result.value);
}



//===============================================

//     –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã

//================================================

/**
 * –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã  -  —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ 
 * —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ Symbol.iterator
 */

/**
 * –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã -  —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å 
 * –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ length.
 */


/**
 * –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ 
 * —è–≤–ª—è—é—Ç—Å—è –ò–¢–ï–†–ò–†–£–ï–ú–´–ú–ò –∏–ª–∏ –ü–°–ï–í–î–û–ú–ê–°–°–ò–í–ê–ú–ò,
 * –∏–ª–∏ –∏ —Ç–µ–º, –∏ –¥—Ä..
 */

// –°—Ç—Ä–æ–∫–∏ - –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã –∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã
//(–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã –∏ –µ—Å—Ç—å length)




/**
 *                      –ù–û!
 * 
 *   –ò–¢–ï–†–ò–†–£–ï–ú–´–ô –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –ü–°–ï–í–î–û–ú–ê–°–°–ò–í–û–ú.
 * 
 *                  –ò –ù–ê–û–ë–û–†–û–¢.
 *  
 *       –ü–°–ï–í–î–û–ú–ê–°–°–ò–í –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –ò–¢–ï–†–ò–†–£–ï–ú–´–ú
 */


//----------------------------------------------------
//  –í–æ—Ç –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤-—Å—è –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–æ–º, –Ω–æ –Ω–µ 
//  –ò–¢–ï–†–ò–†–£–ï–ú–´–ô (–∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤-–≤–æ length)

let arrayLike = {
    0: 'Hello',
    1: 'World',
    length: 2
};

// for (let item of arrayLike){
//      console.log(item);
// }

/**                  –û–®–ò–ë–ö–ê
 * Uncaught TypeError: arrayLike is not iterable
 */



/**
 *       –ò–¢–ï–†–ò–†–£–ï–ú–´–ï –æ–±—ä–µ–∫—Ç—ã –∏ –ü–°–ï–í–î–û–ú–ê–°–°–ò–í–´ - 
 *            - –æ–±—ã—á–Ω–æ –ù–ï –û–ë–™–ï–ö–¢–´.
 */



/**
 * –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π 
 * –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
 * —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Arra.from
 */





//------------------------------------------------
//                  Array.from
//------------------------------------------------

let arrayLike2 = {
    0: 'Hello',
    1: 'World',
    length: 2
};

let trueArr = Array.from(arrayLike2);
trueArr.push('WoW');
// console.log(trueArr);
// ['Hello', 'World', 'WoW']


/**
 *    Array.from - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç 
 * —è–≤–ª-—è –ª–∏ –æ–Ω –ò–¢–ï–†–ò–†–£–ï–ú–´–ú –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –ü–°–ï–í–î–û–ú–ê–°–°–ò–í–û–ú,
 * –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ú–ê–°–°–ò–í –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ç—É–¥–∞ –≤—Å–µ
 * —ç–ª–µ–º–µ–Ω—Ç—ã.
 */


// –¢–æ –∂–µ —Å–∞–º–æ–µ —Å –ò–¢–ï–†–ò–£–ï–ú–´–ú –æ–±—ä–µ–∫—Ç–æ–º.

let range3 = {
    from: 1,
    to: 10  
}

range3[Symbol.iterator]= function() {
    return {
        current: this.from,
        last: this.to,
        next(){
            if(this.current <= this.last) {
                return {
                    done: false,
                    value: this.current++
                }
            } else {
                return {done: true};
            }
        }
    }
};

// for(let num of range3){
//     console.log(num);
// }


let trueArr2 = Array.from(range3);
// console.log(trueArr2);
// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


/**
 *             –ü–æ–ª–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å 
 *     Array.from(obj[,mapFn, thisArg])
 */

/**
 * –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç - —Ñ—É–Ω–∫—Ü–∏—è 
 * –ø—Ä–∏–º–µ–Ω—è–µ–º–∞—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
 * –≤ –º–∞—Å—Å–∏–≤.
 * 
 * thisArg - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç this –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
 */


let trueArr3 = Array.from(range3, num => num * num);
// console.log(trueArr3);
//[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]



//------------------------------------------------
//                 –ø—Ä–∏–º–µ—Ä —Å–æ —Å—Ç—Ä–æ–∫–æ–π


let stroka2 = 'ùí≥üòÇ';

let chars = Array.from(stroka2);
// —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤

// console.log(chars[0]); // ùí≥
// console.log(chars[1]); // üòÇ
// console.log(chars.length); // 2



/**
 * –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç str.split, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ —Ä–∞–±–æ—Ç–µ 
 * –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏, –∏ –ø–æ—ç—Ç–æ–º—É, –∫–∞–∫ –∏ 
 * for..of, –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–º–∏ 
 * –ø–∞—Ä–∞–º–∏.
 * 
 * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —ç—Ç–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏:
 */

let stroka3 = 'ùí≥üòÇ';
// let stroka3 = '1111';

let chars2 = [];
// for(let char of stroka3) {
//     chars2.push(char);
// }

// console.log(chars2); // ['ùí≥', 'üòÇ']





// ---------------–ø—Ä–∏–º–µ—Ä —Å–æ split -----------------
chars2 = stroka3.split('');
// console.log(chars2); // ['\uD835', '\uDCB3', '\uD83D', '\uDE02']



/**
 *          slice - –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ
 * –ø–∞—Ä—ã:
 */

function sliceM(str, start, end) {
    return Array.from(str).slice(start, end).join('');
}

let surragat = 'ùí≥üòÇ©∑∂';
// console.log(sliceM(surragat, 1, 3)); // üòÇ©∑∂




/**
 * –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
 */
// console.log(surragat.slice(1, 3)); //ÔøΩÔøΩ