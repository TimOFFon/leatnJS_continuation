
//=====================================================

//   LJS 5.10    Деструктурирующее присваивание

//=====================================================

// Задача №1 ---------------  3min  --------------------
// У нас есть объект:
let user = {
    name: "John",
    years: 30
  };
  /**
   * Напишите деструктурирующее присваивание, которое:
   * свойство name присвоит в переменную name.
   * свойство years присвоит в переменную age.
   * свойство isAdmin присвоит в 
   * переменную isAdmin (false, если нет такого свойства)
   */
  //Решение:
  let {name = name, years: age = years, isAdmin = false} = user;

//   console.log(name); // John
//   console.log(age); // 30
//   console.log(isAdmin); // false



// Задача №2 --------------  8min  ---------------
// "Минимальная зарплата"
// У нас есть объект salaries с зарплатами:
let salaries = {
    "John": 100,
    "Pete": 300,
    "Mary": 250
  };
  /**
   * Создайте функцию topSalary(salaries), которая
   * возвращает имя самого высокооплачиваемого сотрудника.
   * 
   * Если объект salaries пустой, то нужно вернуть null.
   * Если несколько высокооплачиваемых сотрудников, можно
   * вернуть любого из них.
   * P.S. Используйте Object.entries и деструктурирование,
   * чтобы перебрать пары ключ/значение.
   */

  // Решение:
let emptyObj = {};

  function topSalary(obj) {
    let maxName = null;
    let maxValue = null;
    for(let [name, value] of Object.entries(obj)) {
        if(value > maxValue) {
            maxValue = value;
            maxName = name;
        }
    }
    return console.log(maxName); 
  }

//   topSalary(salaries); // Pete
//   topSalary(emptyObj); // null


//==========================================================
//==========================================================
//==========================================================






//=====================================================

//   LJS 5.11          Объект Date

//=====================================================


//===========================================================
//=========================   1   ===========================
//===========================================================
/** Создайте дату
 * 
 * Создайте объект Date для даты: 20 февраля 2012 года, 
 * 3 часа 12 минут. Временная зона – местная.
 * 
 */
// Решение
//-----------------------------------------------------

let createdData = new Date(2012, 01, 20, 3, 12);
// console.log(createdData);
/**
 * Mon Feb 20 2012 03:12:00 GMT+0400 (Москва, стандартное
 * время)
 */
//===========================================================
//===========================================================
//===========================================================




//============================================================
//========================   2   ============================
//============================================================
/** Покажите день недели
 *  Напишите функцию getWeekDay(date), показывающую день
 * недели в коротком формате: «ПН», «ВТ», «СР», «ЧТ», «ПТ»,
 * «СБ», «ВС».
 */
//Решение
//------------------------------------------------------------

function getWeekDay(date) {

  let week = ['«ВС»', '«ПН»', '«ВТ»', '«СР»', '«ЧТ»', '«ПТ»', '«СБ»'];
  let checkDay = date.getDay();

  return  console.log(week[checkDay]);
}

let ThuDay = new Date();

// getWeekDay(ThuDay); // «ЧТ»

//============================================================
//============================================================
//============================================================



//============================================================
//=======================     3    ===========================
//============================================================
/** День недели в европейской нумерации
 * 
 * В Европейских странах неделя начинается с понедельника
 * (день номер 1), затем идёт вторник (номер 2) и так до
 * воскресенья (номер 7). Напишите функцию getLocalDay(date),
 * которая возвращает «европейский» день недели для даты date.
 */

let date = new Date(2012, 0, 3);  // 3 января 2012 года
// console.log( getLocalDay(date) ); // вторник, нужно показать 2

// Решение
//------------------------------------------------------------

function getLocalDay(date) {
  let euWeek = [7, 1, 2, 3, 4, 5, 6];
  let checkDay = date.getDay();
  return console.log(euWeek[checkDay]);
}

let toDay = new Date();
// getLocalDay(date); // 2
// getLocalDay(toDay); // 4

//============================================================
//============================================================
//============================================================



//============================================================
//=======================     4    ===========================
//============================================================
/** Какой день месяца был много дней назад?
 * 
 * Создайте функцию getDateAgo(date, days), возвращающую
 * число, которое было days дней назад от даты date.
 * 
 * К примеру, если сегодня двадцатое число, то getDateAgo(new
 * Date(), 1) вернёт девятнадцатое и getDateAgo(new Date(),
 * 2) – восемнадцатое.
 * 
 * Функция должна надёжно работать при значении days=365 и
 * больших значениях:
 * 
 * let date = new Date(2015, 0, 2);
 * 
 * alert( getDateAgo(date, 1) ); // 1, (1 Jan 2015)
 * alert( getDateAgo(date, 2) ); // 31, (31 Dec 2014)
 * alert( getDateAgo(date, 365) ); // 2, (2 Jan 2014)
 */


// Решение
//--------------------------------------------------------
function getDateAgo(date, count) {
  let timestap = date.getTime();
  let toTimestap = count * 24 * 3600 * 1000;
  let resultDate = new Date(timestap - toTimestap);
  return console.log(resultDate.toDateString());
}
let dateAgo = new Date(2015, 0, 2);

// getDateAgo(dateAgo, 1); // Thu Jan 01 2015
// getDateAgo(dateAgo, 2); // Wed Dec 31 2014
// getDateAgo(dateAgo, 365); // Thu Jan 02 2014

// ПРОСТОЕ РЕШЕНИЕ ИЗ УЧЕБНИКА
//-----------------------------------------------------------
// function getDateAgo(date, days) {
//   let dateCopy = new Date(date);

//   dateCopy.setDate(date.getDate() - days);
//   return dateCopy.getDate();
// }
//============================================================
//============================================================
//============================================================



//============================================================
//=======================     5    ===========================
//============================================================


/* Последнее число месяца?

Напишите функцию getLastDayOfMonth(year, month), 
возвращающую последнее число месяца. Иногда это 30, 31 или 
даже февральские 28/29.

Параметры:

year – год из четырёх цифр, например, 2012.
month – месяц от 0 до 11.
К примеру, getLastDayOfMonth(2012, 1) = 29 (високосный год, 
февраль). */

// Решение
//------------------------------------------------------------
function getLastDayOfMonth(year, month) {
  let workDate = new Date(year, month + 1, 0);
  return console.log(workDate.getDate());
}

// getLastDayOfMonth(2012, 1); // 29

//============================================================
//============================================================
//============================================================




//============================================================
//=======================     6    ===========================
//============================================================


/* Сколько сегодня прошло секунд?

Напишите функцию getSecondsToday(), возвращающую количество
секунд с начала сегодняшнего дня.

Например, если сейчас 10:00, и не было перехода на зимнее
летнее время, то:

getSecondsToday() == 36000 // (3600 * 10)
Функция должна работать в любой день, т.е. в ней не должно
быть конкретного значения сегодняшней даты. */

// Решение
//------------------------------------------------------------
function getSecondsToday() {
  let workDate = new Date();
  let secTodayInHors = workDate.getHours() * 3600;
  let secTodayInMinutes = workDate.getMinutes() * 60;
  let secTodayInSec = workDate.getSeconds();
  return console.log(secTodayInHors + secTodayInMinutes + secTodayInSec);
}

// getSecondsToday(); // 18:34 => 66840 ((18*3600) + (34*60))

// РЕШЕНИЕ ИЗ УЧЕБНИКА
//---------------------------------------------------------

// function getSecondsToday() {
//   let now = new Date();

//   // создаём объект с текущими днём/месяцем/годом
//   let today = new Date(now.getFullYear(), 
//                           now.getMonth(), 
//                           now.getDate());

//   let diff = now - today; // разница в миллисекундах
//   return Math.round(diff / 1000); // получаем секунды
// }

// alert( getSecondsToday() );
//============================================================
//============================================================
//============================================================



//============================================================
//=======================     7    ===========================
//============================================================

/* Сколько секунд осталось до завтра?


Создайте функцию getSecondsToTomorrow(), возвращающую
количество секунд до завтрашней даты.

Например, если сейчас 23:00, то:

getSecondsToTomorrow() == 3600
P.S. Функция должна работать в любой день, т.е. в ней не
должно быть конкретного значения сегодняшней даты. */

// Решение 
//-----------------------------------------------------------
function getSecondsToTomorrow() {
  let timestapNow = Date.now();
  let today = new Date();
  let tomorrow = new Date(
    today.getFullYear(),
    today.getMonth(),
    today.getDate() + 1
  );
  return console.log(Math.round((tomorrow - timestapNow) / 1000));
}

// getSecondsToTomorrow(); 
// 17812 => 19:03 ((24 - 19) * 3600) - (3*60)) = 17812


// Альтернативное решение из учебника:
//-----------------------------------------------------------
/* function getSecondsToTomorrow() {
  let now = new Date();
  let hour = now.getHours();
  let minutes = now.getMinutes();
  let seconds = now.getSeconds();
  let totalSecondsToday = (hour * 60 + minutes) * 60 + seconds;
  let totalSecondsInADay = 86400;

  return totalSecondsInADay - totalSecondsToday;
} */

//============================================================
//============================================================
//============================================================



//============================================================
//=======================     8    ===========================
//============================================================

/* Форматирование относительной даты

Напишите функцию formatDate(date), форматирующую date по
следующему принципу:

Если спустя date прошло менее 1 секунды, вывести "прямо
сейчас".

В противном случае, если с date прошло меньше 1 минуты,
вывести "n сек. назад".

В противном случае, если меньше часа, вывести "m мин. назад".
В противном случае, полная дата в формате "DD.MM.YY HH:mm". 
А именно: "день.месяц.год часы:минуты", всё в виде двух цифр,
т.е. 31.12.16 10:00.

Например:

alert( formatDate(new Date(new Date - 1)) ); 
// "прямо сейчас"

alert( formatDate(new Date(new Date - 30 * 1000)) ); 
// "30 сек. назад"

alert( formatDate(new Date(new Date - 5 * 60 * 1000)) ); 
//"5 мин. назад"


alert( formatDate(new Date(new Date - 86400 * 1000)) );
// вчерашняя дата вроде 31.12.2016, 20:00 */

//Решение
//-------------------------------------------------------
/*
1) нужно понять сколько прошло с старт-поинта
   а. вычесть из стоп-поинта вычесть старт поинт
   b. создать эталон старта
   c. из аргумента вчесть эталон
2) сравнить с условиями
   а. создать условия с 3 выражениями и 3 return
   в. сравнение с сек/мин/час
 */
function formatDate(date) {
  //1-b
  let reference = new Date();

  //1-c
  let compare = reference - date;

  //2-a-b
  if(compare < 1000) {
    return console.log('прямо сейчас');
  } 
    else if(compare > 1000 && compare < 60000) {
    let n = Math.round(compare / 1000);
    return console.log(`${n} сек. назад`)
  } 
    else if(compare > 60000 && compare < 3600 * 1000) {
    let m = Math.round(compare / 60000);
    return console.log(`${m} мин. назад`);
  } 
    else {
    return console.log(`${date.toLocaleDateString('Ru')}` 
                        + ` ` +
                       `${date.getHours()}` + `:` +
                       `${date.getMinutes()}`);
  }
}

formatDate(new Date(new Date - 1)); 
// прямо сейчас

formatDate(new Date(new Date - 30 * 1000)); 
// 30 сек. назад

formatDate(new Date(new Date - 5 * 60 * 1000)); 
// 5 мин. назад

formatDate(new Date(new Date - 86400 * 1000));
// 26.01.2023 14:33 (вчерашняя дата)