
//===================================================

//        Деструктурирующее присваивание     

//===================================================

/**------------------------------------------------- 
 *                     СИНТАКСИС
 *    Для распкаовки массивов и объектов в переменные
 --------------------------------------------------*/




//================================================
//----------- ДЕСТРУКТУРИЗАЦИЯ  МАССИВА ----------
//================================================

let arr0 = ['Ilya', 'Kantor'];

let [firstName0, surname0] = arr0;

// console.log(firstName0); // 'Ilya'
// console.log(surname0); // 'Kantor'


//------------------------------------------------
// удобно использовать с методами возвращающими 
// массив
//------------------------------------------------
let [firstName1, surname1] = 'Ilya Kantor'.split(' ');

// console.log(firstName1); // 'Ilya'
// console.log(surname1); // 'Kantor'


//-------------------------------------------------
//   «Деструктурирующее присваивание» - ничего не
// делает с правой частью присваивания, его задача
// только скоприровать переменные.
//------------------------------------------------
// это то же самое что и обычное сохранение 
// let [firstName2, surname2] = arr0;
let firstName2 = arr0[0];
let surname2 = arr0[1];


//----------------------------------------------------
// Можно пропускать элементы, используя запятые
//----------------------------------------------------
let [firstName3, , title3] = ['Mike', 'Bill', 'Boss'];
// console.log(firstName3); // 'Mike'
// console.log(title3); // 'Boss'



//----------------------------------------------------
// Можно работать с любым перебираемым объектом 
// с правой стороны
//----------------------------------------------------
let [a4, b4, c4] = 'abc';
let [one4, two4, three4] = new Set([1, 2, 3]);
// console.log(a4, b4, c4); // a b c
// console.log(one4, two4, three4); // 1 2 3



//----------------------------------------------------
// Можно присваивать чему угодно с ЛЕВОЙ стороны
//----------------------------------------------------
let user5 = {};
[user5.name, user5.surname] = 'Ilya Kantor'.split(' ');
// console.log(user5.name); // Ilya
// console.log(user5.surname); // Kantor



//----------------------------------------------------
// Для цикличного перебора ключей и значений объекта
//                 ЦИКЛ с .entries()
//----------------------------------------------------
let user6 = {
    name: "John",
    age: 30
};
//  цикл по ключам и значениям:
for(let [key, value] of Object.entries(user6)){
    // console.log(`${key}: ${value}`);
    // name: John
    // age: 30
}

// то же самое для map:
let user7 = new Map();
user7.set('name7', 'John7');
user7.set('age7', '30_7');

// Map перебирает как пары [ключ, значение]
for(let [key, value] of user7) {
    // console.log(`${key}:${value}`);
    // name7:John7
    // age7:30_7
}



//------------------------------------------------------
//            ТРЮК С ОБМЕНОМ ПЕРЕМЕННЫХ
//------------------------------------------------------
let guest8 = 'Jane';
let admin8 = 'Pete';

// меняем местами значения
[guest8, admin8] = [admin8, guest8];

// console.log(guest8); // Pete
// console.log(admin8); // Jane




//------------------------------------------------------
//               Остаточные параметры
//------------------------------------------------------
let [element1, element2, ...rest] = [1, 2, 3, 4, 5];
// console.log(element1); // 1
// console.log(element2); // 2
// console.log(rest); // [3, 4, 5]



//------------------------------------------------------
//               Значения по умолчанию
//------------------------------------------------------
// если в массиве значений меньше, чем в присваивании,
// ошибки не будет
let [firstName9, surname9] = [];

// console.log(firstName9); // undefined
// console.log(surname9); // undefined

// если надо заменить отстутсвие умолчанием
let [name10 = 'Guest', surname10 = 'Anonymous'] = ["Julius"];
// console.log(name10); // Julius (из массива)
// console.log(surname10); // Anonymous (по умолчанию)

// можно использовать функции в значениях по умолчанию
// let [name11 = prompt('name?'), surname11 = prompt('surname?')] = ["Julius"];
// console.log(name11); // Julius
// console.log(surname11); // результат prompt





//================================================
//----------- ДЕСТРУКТУРИЗАЦИЯ  МАССИВА ----------
//================================================

let {var1, var2} = {var1: 123, var2: 123};
// console.log(var1); // 123
// console.log(var2); // 123


//-------------------------------------------------
//названия переменых должны быть по шаблону объекта
//-------------------------------------------------
let options = {
    title20: 'Menu',
    width20: 100,
    height20: 200
};
let {title20, width20, height20} = options;
// console.log(title20); // Menu
// console.log(width20); // 100
// console.log(height20); // 200


//-------------------------------------------------
// порядок не имеет значения
//-------------------------------------------------
let options2 = {
    title21: 'Menu',
    width21: 100,
    height21: 200
};
let {height21, title21, width21} = options2;
// console.log(height21); // 200
// console.log(title21); // Menu
// console.log(width21); // 100


//-------------------------------------------------
// для присвоения другого имени используем -> :
//-------------------------------------------------
let options3 = {
    title22: 'Menu',
    width22: 100,
    height22: 200
};
let {width22: w, height22: h, title22} = options3;
// console.log(title22); // Menu
// console.log(w); // 100
// console.log(h); // 200


//---------------------------------------------------
// значения по умолчанию
//---------------------------------------------------
let options4 = {
    title23: 'Menu'
};
let {width23 = 100, height23 = 200, title23} = options4;
// console.log(width23); // 100
// console.log(height23); // 200
// console.log(title23); // Menu


//---------------------------------------------------
// в значениях по умолчанию можно использ функции
//--------------------------------------------------
let options5 = {
    title24: 'Menu'
};
// let {width24 = prompt('width?'), title24} = options5;
// console.log(width24); // результат prompt
// console.log(title24); // Menu


//----------------------------------------------------
// можно совмещать : и =
//----------------------------------------------------
let options6 = {
    title25: 'Menu'
};
let {width25: w25 = 100, height25: h25 = 200, title25} = options6;
// console.log(w25); // 100
// console.log(h25); // 200
// console.log(title25); //  Menu


//----------------------------------------------------
// можно сохранять не все свойства
//----------------------------------------------------
let options7 = {
    title26: 'Menu',
    width26: 100,
    heigth26: 200
};
let {title26} = options7;
// console.log(title26); // Menu


//----------------------------------------------------
// Остаток объекта <<...>> (как и в массиве)
//---------------------------------------------------
let options8 = {
    title27: 'Menu',
    height27: 200,
    widht27: 100
};
let {title27, ...rest27} = options8;
// console.log(title27); // Menu
// console.log(rest27); // {height27: 200, widht27: 100}
// console.log(rest27.widht27); // 100
// console.log(rest27.height27); // 200


//------------------------------------------------------
// Сохранение в заранее объявленные переменные
//------------------------------------------------------
let title28, widht28, height28;

let options9 = {
    title28: 'Menu',
    height28: 200,
    widht28: 100
};

// обязательно в скобках!!!
({title28, widht28, height28} = options9);
// console.log(title28); // Menu
// console.log(widht28); // 100
// console.log(height28); // 200


//------------------------------------------------------
//           Вложенная деструктуризация
//-----------------------------------------------------
let options10 = {
    size30: {
        width30: 100,
        height30: 200
    },
    items30: ['Cake', 'Dount'],
    extra30: true
};

// надо повторить структуру!!!
let {
    size30: {
        width30,
        height30
    },
    items30: [item31, item32],
    title31 = 'Menu'
} = options10;

// console.log(title31); // Menu
// console.log(width30); // 100
// console.log(height30); // 200
// console.log(item31); // Cake
// console.log(item32); // Dount





//================================================
//----------- Умные параметры функций ----------
//================================================


//------------------------------------------------
// можно передавать параметры функции как объект,
// это позволяет пользоваться функционалом
// дкструктуризации присваивания,
// не обращая на порядок аргументов, переназночая
// имена, сохраняя значения по умолчанию, 
// передавать вложенные объекты,
// или вообще не указывая параметры передавая 
// пустой объект
//-------------------------------------------------

/**
 * Полный синтаксис – такой же, как для деструктурирующего
 * присваивания:
 * 
 *         function({
 *             incomingProperty: varName = defaultValue
 *             ...
 *         })
 * 
 * 
 * то такое деструктурирование подразумевает, что в showMe
 * () будет обязательно передан аргумент. Если нам нужны все
 * значения по умолчанию, то нам следует передать пустой
 * объект:
 * 
 *          showMenu({}); // ок, все значения - по умолчанию
 * 
 *          showMenu(); // так была бы ошибка
 * 
 */





// Вот как выглядит функция без деструктуризации:
function showMenuWithout(title = 'Untitled', width = 200, height = 100, items = []) {
    //...
}



//----------------------------------------------------
//       ВОТ ТАК ВЫГЛЯДИТ ВЫЗОВ ФУНКЦИИ !!!


// undefined там, где подходят значения по умолчанию
showMenuWithout("My Menu", undefined, undefined, ["Item1", "Item2"]);



//------------------------------------------------------






// РЕШЕНИЕ ПРОБЛЕМЫ С ПОМОЩЬЮ ДЕСТРУКТУРИЗАЦИИ
let options11 = {
    title: 'My Menu',
    items: ['Item1', 'Item2']
}

// функция сама извлечёт свойства в переменные 
// и считает те что по умолчанию
function showMenuDestruct({title = "Untitled", width = 200, height = 100, items = []}) {
    console.log(`${title} ${width} ${height}`);
    console.log(items);
}

// showMenuDestruct(options11); // <--- !!!!! ПРОСТО !!!!
// My Menu 200 100
// ['Item1', 'Item2']



//---------------------------------------------------------
// Можно использовать более сложное деструктурирование 
// с вложенными объектами и двоеточием:
//--------------------------------------------------------
let options12 = {
    title: "My menu",
    items: ["Item1", "Item2"]
  };

  function showMenuDestruct2({
    title = "Untitled",
    width: w = 100,  // width присваиваем в w
    height: h = 200, // height присваиваем в h
    items: [item1, item2] // первый элемент items присваивается в item1, второй в item2
  }) {
    console.log( `${title} ${w} ${h}` ); 
    console.log( item1 ); 
    console.log( item2 ); 
  }

//   showMenuDestruct2(options12);
// My Menu 100 200
// Item1
// Item2


//----------------------------------------------------------
// Если нам нужны все значения по умолчанию, то нам следует
// передать пустой объект:
//----------------------------------------------------------
function showMenuDestruct3({ title = "Menu", width = 100, height = 200 } = {}) {
    console.log(`${title} ${width} ${height}`);
}

showMenuDestruct3(); // Menu 100 200